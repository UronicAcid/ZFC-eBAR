#! /usr/bin/env python3

import argparse
import zfc_ebar

# ------------------
parser = argparse.ArgumentParser(
    prog='zfc_ebar',
    description='Calculate fold change of screening data ' +
    '(zscore log2 fold change).'
)

parser.add_argument(
    '-i', '--input',
    action='store',
    help='Raw count table with header should include' +
    ': <gene>, <guide>, <barcode>, <ctrl>, <exp>.' +
    '<ctrl> is the raw counts of control group, ' +
    '<exp> is the raw counts of treatment group. ' +
    'Default three barcodes: CACT, GCAG, and AGCA.'
)

parser.add_argument(
    '-o', '--outprefix',
    action='store',
    default='zfc_ebar_out',
    help='Output file prefix, ' +
    'can be the file directory path with file name prefix.' +
    ' The directory in the outprefix should be built before analysis.'
)

parser.add_argument(
    '--normalization',
    action='store',
    default='median',
    choices=['total', 'median', 'upper_quartile', 'median_ratio', 'none'],
    help='Normalization of raw count data, default is total. ' +
    'Support method: ' +
    'total (Total sum normalization); ' +
    'median (Median normalization); ' +
    'upper_quartile (Upper quartile normalization (0.75)); ' +
    'median_ratio (Median ratio normalization); ' +
    'none (No normalization).'
)


parser.add_argument(
    '--null-iteration',
    type=int,
    action='store',
    default=100,
    help='The iteration to generate null distribution ' +
    'in calculating the p value of genes. ' +
    'The larger the better, but slower in calculation, ' +
    'default to be 100.'
)

parser.add_argument(
    '--plot',
    action='store_true',
    help='Output additional QC figures.'
)

parser.add_argument(
    '--use_small_count',
    action='store_true',
    default=False,
    help='whether to add a small count to the count matrix, avoid to devide by 0, ' +
    'default to be False.'
)

parser.add_argument(
    '--min_ctrl_counts',
    action='store',
    default=1,
    help='Min counts in ctrl, ' +
    'default to be 1.'
)

parser.add_argument(
    '--min_ctrl_exp_counts',
    action='store',
    default=1,
    help='Min counts in ctrl + exp, ' +
    'default to be 1.'
)

parser.add_argument(
    '--version', action='version',
    version='%(prog)s version: ' + zfc_ebar.__version__
)

args = vars(parser.parse_args())

# ------------------

inputdata = zfc_ebar.read_raw_count(
    args['input'],
    gene_colname='gene',
    guide_colname='guide',
    barcode_colname='barcode',
    ctrl_colname='ctrl',
    exp_colname='exp'
)

barresult, sgresult, gresult= zfc_ebar.zfoldchange(
    inputdata,
    top_n_sgrna=None,  #used in ZFC but disgarded now
    top_n_gene=None,  #used in ZFC but disgarded now
    iteration=args['null_iteration'],
    normalization=args['normalization'],
    min_ctrl_counts=int(args['min_ctrl_counts']),
    min_ctrl_and_exp_counts=int(args['min_ctrl_exp_counts']),
    use_small_count=args['use_small_count'],
    outprefix=args['outprefix']
)


zfc_ebar.write_bar_result(
    barresult,
    '_'.join([args['outprefix'], 'barcode.txt'])
)

zfc_ebar.write_sg_result(
    sgresult,
    '_'.join([args['outprefix'], 'sgrna.txt'])
)

zfc_ebar.write_g_result(
    gresult,
    '_'.join([args['outprefix'], 'gene.txt'])
)

if args['plot']:
    zfc_ebar.zfc_plot(
        args['outprefix'], inputdata,
        barresult, sgresult, gresult
    )

# ------------------
